const e=new Map,t="rtl"===window.getComputedStyle(document.documentElement).direction,n={LEFT:37,UP:38,RIGHT:39,DOWN:40},r=t=>{const{currentTarget:n}=t;e.get("last_rover")!=n&&e.has(n)&&(i(n,e.get(n).active),e.set("last_rover",n))},a=e=>{const{currentTarget:s}=e;switch(e.keyCode){case n[t?"LEFT":"RIGHT"]:case n.DOWN:e.preventDefault(),c(s);break;case n[t?"RIGHT":"LEFT"]:case n.UP:e.preventDefault(),d(s)}},s=new MutationObserver(((t,n)=>{t.filter((e=>e.removedNodes.length>0)).forEach((t=>{[...t.removedNodes].filter((e=>1===e.nodeType)).forEach((t=>{e.forEach(((n,l)=>{"last_rover"!==l&&t.contains(l)&&(l.removeEventListener("focusin",r),l.removeEventListener("keydown",a),e.delete(l),n.targets.forEach((e=>e.tabIndex="")),(0===e.size||1===e.size&&e.has("last_rover"))&&(e.clear(),s.disconnect()))}))}))}))})),o=({element:t,target:n})=>{const l=t.querySelectorAll(n||":scope *"),v=l[0];t.tabIndex=-1,l.forEach((e=>e.tabIndex=-1)),v.tabIndex=0,e.set(t,{targets:l,active:v,index:0}),t.addEventListener("focusin",r),t.addEventListener("keydown",a),s.observe(document,{childList:!0,subtree:!0})},c=t=>{const n=e.get(t);n.index+=1,n.index>n.targets.length-1&&(n.index=n.targets.length-1);let s=n.targets[n.index];s&&i(t,s)},d=t=>{const n=e.get(t);n.index-=1,n.index<1&&(n.index=0);let s=n.targets[n.index];s&&i(t,s)},i=(t,n)=>{const s=e.get(t);s.active.tabIndex=-1,s.active=n,s.active.tabIndex=0,s.active.focus()};export{o as rovingIndex};

