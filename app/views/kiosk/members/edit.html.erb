<a href="<%= join_path %>"><h2>‚Üê Back to Join</h2></a>
<h1 style="margin-bottom: 1rem">Edit <%= @member.name %></h1>
<%= link_to destroy_identity_login_index_path do %>
    <button class="subheading-button">Log out</button>
<% end %>

<%= turbo_stream_from @member %>
<%= form_with model: @member, scope: :member, url: kiosk_member_path, method: :patch do |form| %>
  <% if @member&.renewable? then %>
    <div class="notice">
      <h2>It's time to renew your membership!</h2>
      <p><%= @member.expired? ? "Your membership expired" : "If you don't renew, your membership will expire" %> <b><%= local_relative_time(@member.expires_at, type: "weekday-or-date") %>.</b></p>
      <br>
      <%= form.button "Renew", formaction: renew_kiosk_member_path, formmethod: "post" %>
    </div>
  <% end %>
  <div>
    <%= form.label :name, "Full name" %>
    <%= form.text_field :name, placeholder: "Fionah United" %>
  </div>
  <div>
    <%= form.label :name, "Username" %>
    <%= form.text_field :username, placeholder: "fionahu" %>
  </div>
  <div>
    <%= form.label :email, "Email" %>
    <%= form.email_field :email, placeholder: "fionahu@obl.ong" %>
  </div>
  <h3 style="margin: 0; margin-top: 0.5rem;">Postal Address</h3>
  <%= form.fields_for :address, @member.address || Address.new(addressable_id: @member, addressable_type: Member) do |address_form| %>
    <div>
      <%= address_form.label :line1, "Number and Street" %>
      <%= address_form.text_field :line1 %>
    </div>
    <div>
      <%= address_form.label :line2, "Line 2" %>
      <%= address_form.text_field :line2 %>
    </div>
    <div style="display: flex; flex-direction: row; justify-content: space-between;">
      <div style="max-width: 50%;">
        <%= address_form.label :city %>
        <%= address_form.text_field :city %>
      </div>
      <div style="max-width: 50%;">
        <%= address_form.label :province %>
        <%= address_form.text_field :province %>
      </div>
    </div>
    <div style="display: flex; flex-direction: row; justify-content: space-between;">
      <div style="width: 50%">
        <%= address_form.label :code, "Postal Code" %>
        <%= address_form.text_field :code %>
      </div>
      <div style="width: 50%">
        <%= address_form.label :country %>
        <%= address_form.select :country, Domesticable::Country.all.prepend(nil) %>
      </div>
    </div>
  <% end %>
  <div style="height: 100%; width: 100%;">
    <%= form.label :signature, "Signature" %>
    <%= form.hidden_field :signature %>
    <div style="position: relative; width: 100%;">
      <canvas class="signature">
      </canvas>
      <div style="display: flex; flex-direction: row; gap: 0.5rem; position: absolute; top: 0.5rem; right: 0.5rem;">
          <button id="undo">Undo</button>
          <button id="clear">Clear</button>
      </div>
    </div>
  </div>
  <div>
    <%= form.label :expires_at, "Expires on" %>
    <%= form.date_field :expires_at, placeholder: DateTime.now + 1.year, disabled: true %>
  </div>
  <div>
    <%= form.label :banned, "Banned?" %>
    <%= form.check_box :banned, disabled: true %>
  </div>
  <%= form.submit %>
  <%= form.submit "Delete Membership", class: "delete", formmethod: :delete, data: { turbo_confirm: "Are you sure you want to delete your membership?" } %>
<% end %>

<script>
  import("signature_pad").then((mod) => {
    const canvas = document.querySelector("canvas")
    const SignaturePad = mod.default;
    const bgColor = window.matchMedia('(prefers-color-scheme: dark)').matches ? "#111110": "#fdfdfc";

    const pad = new SignaturePad(canvas, {
      penColor: window.matchMedia('(prefers-color-scheme: dark)').matches ? "#FBFBFE" : "black"
    });

    const data = document.querySelector("#member_signature").value ? JSON.parse(document.querySelector("#member_signature").value) : []
    
    data.forEach((p) => {
      p.penColor = window.matchMedia('(prefers-color-scheme: dark)').matches ? "#FBFBFE" : "black"
    })
    pad.fromData(data)

    function resizeCanvas() {
      const ratio = Math.max(window.devicePixelRatio || 1, 1);
      canvas.width = canvas.offsetWidth * ratio;
      canvas.height = 150 * ratio;
      canvas.getContext("2d").scale(ratio, ratio);
      pad.clear(); // otherwise isEmpty() might return incorrect value
      pad.fromData(data);
    }

    window.addEventListener("resize", resizeCanvas);
    resizeCanvas();

    document.querySelector("form").addEventListener("submit", () => {
        document.querySelector("#member_signature").value = JSON.stringify(pad.toData());
    })

    document.getElementById('clear').addEventListener('click', function(e) {
        e.preventDefault();
        pad.clear();
    });

    document.getElementById('undo').addEventListener('click', function(e) {
        e.preventDefault();
        let currentData = pad.toData();
        if (currentData) {
            currentData.pop(); // remove the last dot or line
            pad.fromData(data);
        }
    });

    window.matchMedia('(prefers-color-scheme: dark)').addListener((e) => {
      let currentData = pad.toData();
      pad.clear()
      currentData.forEach((p) => {
        p.penColor = window.matchMedia('(prefers-color-scheme: dark)').matches ? "#FBFBFE" : "black"
      })
      pad.fromData(currentData)
    })
  })
</script>