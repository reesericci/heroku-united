#!/bin/bash

printf "\n
MMMMc        0MMMO                  'MMMx     oM,                               xM,  XMMM,
WMMMc        0MMMk                  xMMMN   XMMM,                             NMMM,  XMMM,
WMMMc        0MMMk                          XMMM,                             NMMM,  XMMM,
WMMMc        0MMMk  XMMMKMMMMMMMO   cMMM0.MMMMMMMMMK   XMMMMMMMMO     ,MMMMMMMMMMM,  KMMM,
WMMMc        0MMMk  XMMMMMX0MMMMMX  cMMM0 KKWMMMXKKx dMMMM,  oMMMM;  XMMMMW0WMMMMM,  dMMM 
WMMMc        0MMMk  XMMMl    'MMMM. cMMM0   XMMM,   'MMM0     .MMMN oMMMO     NMMM,  ;MMX 
WMMMc        KMMMk  XMMM;    .MMMM. cMMM0   XMMM,   cMMMMMMMMMMMMMN OMMMo     NMMM,  .MMx 
dMMMM.      oMMMM,  XMMM;    .MMMM. cMMM0   XMMM,   .MMMN           lMMMW     NMMM,    .  
 lMMMMMMMMMMMMMM.   XMMM;    .MMMM. cMMM0   KMMMMMMX 'MMMMMMMMMMMc   OMMMMMMMMMMMM, cMMMMW
    KMMMMMMMMl      XMMM;    .MMMM. cMMM0    XMMMMMo    WMMMMMMX       0MMMMMdNMMM,  NMMM:\n"

if ! command -v docker &>/dev/null; then
  printf "\nDocker is not installed on this server. You may want to run:\n\ncurl https://get.docker.com | sudo bash \n\nto install Docker\n"
  exit 1
fi

systemctl enable --now docker

if ! command -v curl &>/dev/null; then
  printf "\ncURL is not installed on this server.\n"
  exit 1
fi

if ! command -v openssl &>/dev/null; then
  printf "\nopenssl is not installed on this server.\n"
  exit 1
fi

printf "\nUnited is about to be installed to /etc/united, and will attempt to bind to :80 and :443. \n\nIf this is unintentional, you have 10 seconds to press [CTRL+C] to cancel.  \n\n"

sleep 10

mkdir -p /etc/united || exit

cd /etc/united || exit

curl -O "https://codeberg.org/reesericci/united/raw/branch/main/docker-compose.yml"

tee .env <<EOF &>/dev/null
RAILS_ENV=production
SECRET_KEY_BASE="$(openssl rand -base64 94)"
EOF

printf "\nDo you have an external domain connected to this server? (y/N) "
read -n 1 -e -r external

if [[ $external =~ ^[Yy]$ ]]; then
  printf "\nWhat's your external domain?\n\n"
  read -e -r domain
  fqdn="${domain#http*://}"
  tee -a .env <<EOF &>/dev/null
TLS_DOMAIN=$fqdn
EOF
else
  tee -a .env <<EOF &>/dev/null
TLS_DOMAIN=united.local
TLS_LOCAL=true
EOF
fi

tee /etc/systemd/system/united.service <<'END' &>/dev/null
[Unit]
Description=United
After=docker.service

[Service]
Type=simple
DynamicUser=yes
SupplementaryGroups=docker
InaccessiblePaths=-/lost+found
NoExecPaths=/
ExecPaths=/usr/bin/docker /usr/bin/bash /usr/lib /usr/lib64 /usr/libexec/docker/ /usr/bin/id /usr/bin/chown
Restart=on-failure
WorkingDirectory=/etc/united
StateDirectory=united
LogsDirectory=united
ConfigurationDirectory=united
ExecStart=/usr/bin/bash -c "FIXUID=$(id -u) FIXGID=$(id -g) docker compose up --remove-orphans"
ExecStop=/usr/bin/docker compose down

[Install]
WantedBy=multi-user.target
END

docker compose pull

systemctl daemon-reload

systemctl enable --now united.service

sleep 60

if [ -n "$fqdn" ]; then
  printf '\n\nUnited is now available at: https://%s\n\n' "$fqdn"
else
  printf '\n\nUnited is now available at: https://%s\n\n' "$(ip -4 route get 1.1.1.1 | sed -n 's/^.*src \([0-9.]*\).*$/\1/p')"
fi
