#!/bin/bash

printf "\n
MMMMc        0MMMO                  'MMMx     oM,                               xM,  XMMM,
WMMMc        0MMMk                  xMMMN   XMMM,                             NMMM,  XMMM,
WMMMc        0MMMk                          XMMM,                             NMMM,  XMMM,
WMMMc        0MMMk  XMMMKMMMMMMMO   cMMM0.MMMMMMMMMK   XMMMMMMMMO     ,MMMMMMMMMMM,  KMMM,
WMMMc        0MMMk  XMMMMMX0MMMMMX  cMMM0 KKWMMMXKKx dMMMM,  oMMMM;  XMMMMW0WMMMMM,  dMMM 
WMMMc        0MMMk  XMMMl    'MMMM. cMMM0   XMMM,   'MMM0     .MMMN oMMMO     NMMM,  ;MMX 
WMMMc        KMMMk  XMMM;    .MMMM. cMMM0   XMMM,   cMMMMMMMMMMMMMN OMMMo     NMMM,  .MMx 
dMMMM.      oMMMM,  XMMM;    .MMMM. cMMM0   XMMM,   .MMMN           lMMMW     NMMM,    .  
 lMMMMMMMMMMMMMM.   XMMM;    .MMMM. cMMM0   KMMMMMMX 'MMMMMMMMMMMc   OMMMMMMMMMMMM, cMMMMW
    KMMMMMMMMl      XMMM;    .MMMM. cMMM0    XMMMMMo    WMMMMMMX       0MMMMMdNMMM,  NMMM:
       .:;                                     ,;          ;;             :.          .,\n"

if ! command -v docker &> /dev/null; then
  printf "\nDocker is not installed on this server. You may want to run:\n\ncurl https://get.docker.com | sudo bash \n\nto install Docker\n"
  exit 1
fi

systemctl enable --now docker

if ! command -v curl &> /dev/null; then
  printf "\ncURL is not installed on this server.\n"
  exit 1
fi

if ! command -v git &> /dev/null; then
  printf "\ngit is not installed on this server.\n"
  exit 1
fi

printf "\nUnited is about to be installed to /srv/united. If this is unintentional, you have 10 seconds to press [CTRL+C] to cancel.  \n\n"

sleep 10

curl https://codeberg.org/reesericci/united/archive/main.tar.gz | tar -xz -C /srv/

cd /srv/united

tee .env <<EOF &> /dev/null 
RAILS_ENV=production
SECRET_KEY_BASE="$(docker run -it --rm intel/qat-crypto-base:qatsw-ubuntu openssl rand -base64 48)"
RAILS_MASTER_KEY="$(docker run -it --rm intel/qat-crypto-base:qatsw-ubuntu openssl rand -base64 48)"
EOF

printf "\nDo you have an external domain connected to this server? (y/N) " 
read -n 1 -e -r external

if [[ $external =~ ^[Yy]$ ]]; then
  printf "\nWhat's your external domain?\n\n"
  read -e -r domain
  fqdn="${domain#http*://}"
  printf "\nTLS_DOMAIN=${fqdn}" | tee -a .env
else
 printf "\nTLS_DOMAIN=united.local" | tee -a .env
 printf "\nTLS_LOCAL=true" | tee -a .env
fi

docker compose build

tee /etc/systemd/system/united.service <<'END' &> /dev/null
[Unit]
Description=United
After=docker.service

[Service]
Type=simple
DynamicUser=yes
ReadWritePaths=/srv/united/db /srv/united/log /srv/united/storage/ /run /var /srv/united/.env
ReadOnlyPaths=/
SupplementaryGroups=docker
InaccessiblePaths=-/lost+found
NoExecPaths=/
ExecPaths=/usr/bin/docker /usr/bin/bash /usr/lib /usr/lib64 /srv/united/bin/ /usr/libexec/docker/ /usr/bin/id /usr/bin/chown
Restart=on-failure
WorkingDirectory=/srv/united/
StateDirectory=united
LogsDirectory=united
ExecStart=/usr/bin/bash -c "FIXUID=$(id -u) FIXGID=$(id -g) docker compose up --remove-orphans"
ExecStop=/usr/bin/docker compose down

[Install]
WantedBy=multi-user.target
END

systemctl daemon-reload

systemctl enable --now united.service

sleep 60

if [ -n "$fqdn" ]; then
  printf "\n\nUnited is now available at: https://$fqdn\n\n"
else
  printf "\n\nUnited is now available at: https://$(ip -4 route get 1.1.1.1 | sed -n 's/^.*src \([0-9.]*\).*$/\1/p')\n\n"
fi
